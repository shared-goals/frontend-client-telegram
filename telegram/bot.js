require('dotenv').config()

'use strict'

let request = require('request')
let token = '1102699634:AAHKHlzKqPddGpzBGi4sGzfDYeH6n1qFYUc'
let TGAPI = `https://api.telegram.org/bot${token}`
let SGAPI = `http://127.0.0.1:3030`
let msgObserver = new MsgObserver()
let msgActions = new MsgActions()
let inProgressUpdate = false
let lastUpdate = 0
let msgCounter = 0
let updateCounter = 0
let currentUser = null

function MsgActions () {
    this.list = {}
    this.idByKeyMap = {}
    this.set = (action) => {
        this.list[action.key] = action
        this.idByKeyMap[action.id] = action.key
    }
    this.get = (key) => {
        return (typeof this.list[key] !== 'undefined' ? this.list[key] : this.list[this.idByKeyMap[key]])
    }
}

// –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π–Ω—Å–Ω—ã–µ —Å–∫—Ä–∏–Ω—ã / –∫–Ω–æ–ø–∫–∏
msgActions.set({
    id: 'welcome',
    key: 'welcome',
    text: 'Welcome to SharedGoals service.',
    reply_markup: JSON.stringify({
        keyboard: [
            [
                {text: `üß∞ Goals`, callback_data: 'goals'},
                {text: `üõ† Settings`}
            ]
        ],
        resize_keyboard: true
    })
})
msgActions.set({
    // external: true,
    id: 'goals',
    key: 'üß∞ Goals',
    text: 'What do you mean?',
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [
                {text: `üóÇ List all`, callback_data: 'listAllGoals'},
                {text: `üß∞ New goal`, callback_data:'createNewGoal'},
            ],[
                {text: `‚¨ÖÔ∏è Back`, callback_data:'welcome'}
            ]
        ]
    })
})

// Settings from subs to parent
msgActions.set({
    id: 'changeLanguage',
    key: `üá∑üá∫ Change language`,
    text: `üá∑üá∫ Change language`,
    callback_data:'chLang'
})
msgActions.set({
    id: 'chLang',
    key: `üá∑üá∫ Select language`,
    text: `üá∑üá∫ Select language`,
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [
                {text: `üá¨üáß English`, callback_data:'en'},
                {text: `üá∑üá∫ –†—É—Å—Å–∫–∏–π`, callback_data:'ru'}
            ],[
                {text: `‚¨ÖÔ∏è Back`, callback_data:'welcome'}
            ]
        ]
    })
})
msgActions.set({
    id: 'settings',
    key: 'üõ† Settings',
    text: 'Select Settings below',
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [
                msgActions.get('changeLanguage')
            ],[
                {text: `‚¨ÖÔ∏è Back`, callback_data:'welcome'}
            ]
        ]
    })
})
msgActions.set({
    id: 'listAllGoals',
})


// –Ω–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
msgObserver
    .subscribe(listAllGoalsHandler)
    .subscribe(startHandler)
    .start()

/**
 * –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –æ–ø–æ–≤–µ—â–∞–µ—Ç –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 * –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ web_hook –æ—Ç Yandex Function https://functions.yandexcloud.net/d4efasnhvk9uo58bdrju
 
 https://cloud.yandex.ru/docs/functions/quickstart/function-quickstart
 
$ yc serverless function version create \
--function-name=my-nodejs-function \ # –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏.
--runtime nodejs12 \ # –°—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–µ–Ω–µ–Ω–∏—è.
--entrypoint index.handler \ # –û–±—Ä–∞–±–æ—Ç—á–∏–∫, —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <–∏–º—è —Ñ–∞–π–ª–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π>.<–∏–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞>.
--memory 128m \ # –û–±—ä–µ–º RAM.
--execution-timeout 5s \ # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ —Ç–∞–π–º–∞—É—Ç–∞.
--source-path ./hello-js.zip # ZIP-–∞—Ä—Ö–∏–≤ c –∫–æ–¥–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
 
 **/

function MsgObserver(){
    let self = this

    const doReport = false  // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥

    let listeners = []      // –ú–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    let timeouts = {        // –¢–∞–π–º–∞—É—Ç—ã
        observe: 1000,      // ... –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ –æ—Ç Telegram
        report: 60000       // ... –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å / –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
     * @param func
     * @returns {MsgObserver}
     */
    function subscribe(func){
        listeners.push(func)
        return self
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å / –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
     * @param data
     * @returns {MsgObserver}
     */
    function triggered(data){
        listeners.forEach((func) => {
            func(data.message || data.callback_query)
        })
        return self
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
     **/
    function update(observer){
        if(!inProgressUpdate){
            let msg
            inProgressUpdate = true
            
            makeRequest('getUpdates', {offset: lastUpdate + 1})
                .then( (data) => {
                    data.result.forEach( (item) => {
                        msgCounter += 1
                        msg = item.message || item.callback_query
                        let log = `\r\n–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.username}\r\nPOST ${TGAPI}/getUpdates\r\n`
                        
                        if (item.update_id > lastUpdate) {
                            lastUpdate = item.update_id
                        }

                        if (msg.data) {
                            console.log(`${log}inline –∫–Ω–æ–ø–∫–∞: ${msg.data}\r\n`)
                        } else {
                            console.log(`${log}–¢–µ–∫—Å—Ç: ${msg.text}\r\n`)
                        }
                        
                        
                        observer.triggered(item)
                    })
                    
                    inProgressUpdate = false
                })
        }
    }
    
    /**
     * –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
     * @returns {MsgObserver}
     */
    function start () {
        setInterval(update, timeouts.observe, self)
        return self
    }

    // –ï—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–∞–¥–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∏–Ω–≥ –≤ –ª–æ–≥ - –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (doReport === true) {
        setInterval(function () {
            console.log(`\r\n–ó–∞ 1min –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${updateCounter} POST –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ Telegram API getUpdates.\r\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${msgCounter} —Å–æ–æ–±—â–µ–Ω–∏–π\r\n`)
            msgCounter = 0
            updateCounter = 0
        }, timeouts.report)
    }
    
    // –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—â–∏–π —Å–ª—É—à–∞—Ç–µ–ª—å / –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    subscribe( function (msg) {
        let opt = msgActions.get(msg.data || msg.text.replace(/^\//, ''))
        if (typeof opt !== 'undefined') {
            opt.chat_id = msg.from.id
            makeRequest('sendMessage', opt)
                .then(() => {
                    console.log(`\r\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${msg.from.username}\r\nPOST ${TGAPI}/sendMessage\r\nBody: ${JSON.stringify(opt, '', 4)}\r\n`)
                })
        } else {
            console.error('action –Ω–µ –Ω–∞–π–¥–µ–Ω', msg)
        }
    })
    
    console.log('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞, –¥–µ–º–æ–Ω –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Telegram –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞')
    
    self.subscribe = subscribe
    self.triggered = triggered
    self.start = start
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö API
 **/
function makeRequest(method, args = {}) {
    let address = args.external === true ? SGAPI : TGAPI
    return new Promise((resolve, reject) => {
        updateCounter++
        let opt = {
            method: args.method || 'POST',
            url: `${address}/${method}`,
            form: args,
            user_id: currentUser ? currentUser.id : 0
        }
        if (args.external) console.log(opt)
        request(opt, (error, response, body) => {
            if (!error) {
                resolve(JSON.parse(body))
            } else {
                reject(error)
            }
        })
    })
}

/**
 *
 */
function startHandler (msg) {
    if(msg.text && msg.text === '/start'){
        let opt = {
            chat_id: msg.from.id,
            external: true,
            method: 'GET'
        }
        let action
       
        makeRequest('sendMessage', {
            chat_id: msg.from.id,
            text: 'Getting user data...'
        })
        
        makeRequest('users/email/' + (msg.from.username || msg.from.id) + '@t.me', opt)
            .then((response) => {
                currentUser = response
                if (!response.hasOwnProperty('id')) {
                    makeRequest('sendMessage', {
                        chat_id: msg.from.id,
                        text: 'Registering user...'
                    })
                    let opt = {
                        chat_id: msg.from.id,
                        external: true,
                        method: 'POST',
                        email: msg.from.username + '@t.me',
                        password: msg.from.id
                    }
                    makeRequest('register', opt)
                        .then((response) => {
                            currentUser = response
                            makeRequest('sendMessage', {
                                chat_id: msg.from.id,
                                text: 'User ' + msg.from.username + ' registered...'
                            })
                            action = msgActions.get('welcome')
                            action.chat_id = msg.from.id
                            makeRequest('sendMessage', action)
                        })
                } else {
                    action = msgActions.get('welcome')
                    action.chat_id = msg.from.id
                    makeRequest('sendMessage', action)
                }
            })
    }
}

/**
 *
 */
function listAllGoalsHandler (msg) {
    if(msg.data && msg.data === 'listAllGoals'){
        let opt = {
            chat_id: msg.from.id,
            external: true,
            method: 'GET'
        }
        
        makeRequest('sendMessage', {
            chat_id: msg.from.id,
            text: 'Fetching goals data...'
        })
        makeRequest('goals', opt)
            .then((response) => {
                let goals = []
                response.forEach((goal) => {
                    goals.push([
                        {
                            text: goal.title,
                            callback_data: 'goal_id_' + goal.id
                        },
                    ])
                    msgActions.set({
                        id: 'goal_id_' + goal.id,
                        key: 'üõ† Goal ' + goal.id,
                        text: goal.text,
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [
                                    {text: `üóÇ Set contract`, callback_data: 'setGoalContract'},
                                    {text: `üíµ Set commit`, callback_data: 'setGoalCommit'}
                                ],[
                                    {text: `‚¨ÖÔ∏è Back`, callback_data: 'listAllGoals'}
                                ]
                            ]
                        })
                    })
                })
                goals.push([
                    {text: `üß∞ New goal`, callback_data:'createNewGoal'},
                    {text: `‚¨ÖÔ∏è Back`, callback_data:'welcome'}
                ])
                makeRequest('sendMessage', {
                    chat_id: msg.from.id,
                    text: 'Your goals:',
                    reply_markup: JSON.stringify({
                        inline_keyboard: goals
                    })
                })
            })
    }
}